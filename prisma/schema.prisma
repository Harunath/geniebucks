// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  name        String?
  gender      GenderTypes   @default(PreferNotToSay)
  password    String?        // Add this if you're handling authentication
  transactions Transaction[] // One-to-many relationship with Transaction
  profession  ProfessionTypes @default(Unemployed)
  Emis Emis[]
  setSpendLimit Boolean @default(false)
  spendingLimit Int? @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt


}

model Transaction {
  id          Int      @id @default(autoincrement())
  userId      Int      // Foreign key for User
  user        User     @relation(fields: [userId], references: [id])
  amount      Float    // Amount of the transaction
  type        String   // Type of transaction (e.g., "income", "expense")
  source      String?  
  category    String?  // Optional category for the transaction
  description String?  // Optional description
  date        DateTime @default(now()) // Date of the transaction
}

model Emis {
  id               Int        @id @default(autoincrement())
  userId           Int        // Foreign key for User
  user             User       @relation(fields: [userId], references: [id])
  amount           Decimal    @db.Decimal(10,2) // Precise monetary value
  to               String?    // Optional recipient
  for              String     // Purpose or reason
  status           EmiStatus  @default(PENDING) // EMI status
  installmentNumber Int?      // Current installment number
  totalInstallments Int?      // Total number of installments
  dueDate          DateTime   @default(now())   // Due date for EMI
  endDate          DateTime   @default(now())   // End date for EMI
  date             DateTime   @default(now())   // Date of the earnings
  notes            String?    // Optional notes or comments

  @@index([dueDate])
  @@index([userId])
}

enum GenderTypes {
  Male
  Female
  Other
  PreferNotToSay
}

enum EmiStatus {
  PENDING
  PAID
  OVERDUE
}

enum ProfessionTypes {
  Employed
  SelfEmployed
  Business
  Student
  Retired
  Unemployed
}
